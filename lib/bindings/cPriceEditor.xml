<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="cPriceField" extends="form.cField#cDoubleField">
		<content>
			<children/>
			<xul:vbox>
				<xul:hbox xbl:inherits="context,spellcheck" flex="1" align="center">
					<xul:textbox size="5" anonid="internalcontrol" xbl:inherits="disabled,size,tabindex,accesskey" />
					<xul:spinbuttons anonid="buttons" xbl:inherits="disabled,hidden=hidespinbuttons" style="margin-left:-5px;margin-top:3px;margin-bottom:3px;" />
					<xul:label xbl:inherits="value=currency" />
					<xul:label xbl:inherits="value=mode" />
					<xul:toolbar>
						<xul:toolbarbutton image="chrome://global/skin/icons/question-16.png" 
							xbl:inherits="hidden=hidehelp" 
							oncommand="dispatchFieldEvent('fieldHelp');"/>
					</xul:toolbar>
				</xul:hbox>
			</xul:vbox>
		</content>
		<implementation>
			<method name="setInitialValue">
				<parameter name="val" />
				<body><![CDATA[
					if (val.length > 1 && val.charAt(0) == '{')
					{
						var jsonVal = wCore.parseJSON(val);
						this.setAttribute('currency', jsonVal.currency);
						this.setAttribute('mode', jsonVal.mode);
						var fval = this.fixString(jsonVal.value);
					}
					else
					{
						var fval = this.fixString(val);
					}

					this.setAttribute("initialvalue", fval);
					this.internalControl.value = fval;
					if (this.modified)
					{
						this.removeAttribute("modified");
						this.dispatchFieldEvent('fieldRestored');						
					}
					
					var errorMessage = this.checkRequired(fval);
					this.setValidity(errorMessage);
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<binding id="cDiscountHelper">
		<content>
			<xul:spacer />
			<xul:hbox align="center">
				<xul:box><xul:cfield anonid="mType" name="mType" fieldtype="dropdownlist" hidehelp="true" listid="modules_catalog/discounttypes" initialvalue="price" /></xul:box>
				<xul:box><xul:cfield anonid="mValue" name="mValue" fieldtype="double" disabled="true" hidehelp="true" /></xul:box>
				<xul:button anonid="mUpdate" disabled="true" label="Mettre Ã  jour le prix" oncommand="update();" image="{IconsBase}/small/check.png" />
				<xul:button anonid="mCancel" disabled="true" label="Annuler" oncommand="cancel();" image="{IconsBase}/small/undo.png" />
			</xul:hbox>
		</content>
		<implementation>
			<method name="update">
				<body><![CDATA[
					var discountType = document.getAnonymousElementByAttribute(this, 'anonid', 'mType').value;
					var discountValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue').value;
					var valueField = document.getElementById('catalog_price_boValue');
					
					var value = valueField.value;
					var description = '';
					switch (discountType)
					{
						case 'percentage' :
							value -= (value*discountValue)/100;
							description = '-' + discountValue + '%';
							break;
							
						case 'value' :
							value -= discountValue;
							description = '-' + discountValue + valueField.getAttribute('currency');
							break;
					}
					value = Math.round(100*value)/100;
					document.getElementById('catalog_price_boDiscountValue').value = value;
					document.getElementById('catalog_price_discountDetail').value = description;
					this.cancel();
				]]></body>
			</method>
			
			<method name="cancel">
				<body><![CDATA[
					document.getAnonymousElementByAttribute(this, 'anonid', 'mType').value = 'price';
				]]></body>
			</method>
		
			<method name="onTypeChanged">
				<body><![CDATA[
					try
					{
						var mType = document.getAnonymousElementByAttribute(this, 'anonid', 'mType');
						var mValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue');
						var mCancel = document.getAnonymousElementByAttribute(this, 'anonid', 'mCancel');
						
						if (mType.value != 'price')
						{
							mCancel.removeAttribute('disabled');
							mValue.removeAttribute('disabled');
							
						}
						else
						{
							mCancel.setAttribute('disabled', 'true');
							mValue.value = '';
							mValue.setAttribute('disabled', 'true');
						}
					}
					catch (e)
					{
						wCore.error('cDiscountHelper.onTypeChanged', [], e);
					}
				]]></body>
			</method>
			
			<method name="onValueChanged">
				<body><![CDATA[
					try
					{
						var mValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue');
						var mUpdate = document.getAnonymousElementByAttribute(this, 'anonid', 'mUpdate');
						
						if (mValue.value)
						{
							mUpdate.removeAttribute('disabled');
						}
						else
						{
							mUpdate.setAttribute('disabled', 'true');
						}
					}
					catch (e)
					{
						wCore.error('onValueChanged.onValueChanged', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (event.originalTarget.name == 'mType')
				{
					this.onTypeChanged();
				}
				else if (event.originalTarget.name == 'mValue')
				{
					this.onValueChanged();
				}
				event.stopPropagation();
			]]></handler>
			<handler event="fieldModified"><![CDATA[
				event.stopPropagation();
			]]></handler>
			<handler event="fieldRestored"><![CDATA[
				event.stopPropagation();
			]]></handler>
		</handlers>
	</binding>
	
	<binding id="cPricesPanel" extends="layout.cDocumentEditor#cDocumentEditorPanelFields">
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:hbox anonid="action-bar">
					<xul:button anonid="button-new" oncommand="createNew()" label="&amp;modules.catalog.bo.doceditor.panel.prices.New;" image="{IconsBase}/small/add.png"/>
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:box anonid="price-filters-box">
						<xul:grid flex="1">
							<xul:columns>
								<xul:column />
								<xul:column flex="1" />
							</xul:columns>
							<xul:rows>
								<xul:row>
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Shop;" />
									<xul:cfield anonid="field_shop" name="shop" fieldtype="dropdownlist" hidehelp="true" />
								</xul:row>
								<xul:row>
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Date;" />
									<xul:cfield anonid="field_date" name="date" fieldtype="datetime" hidehelp="true" hidetime="true" />
								</xul:row>
								<xul:row anonid="row_targetType">
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Target-type;" />
									<xul:cfield anonid="field_targetType" name="targetType" fieldtype="dropdownlist" hidehelp="true" />
								</xul:row>
								<xul:row anonid="row_targetId">
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Target-id;" />
									<xul:cfield anonid="field_targetId" name="targetId" fieldtype="dropdownlist" hidehelp="true" disabled="true" />
								</xul:row>
							</xul:rows>
						</xul:grid>
					</xul:box>
					<xul:vbox flex="1" anonid="price-list-box">	
						<xul:hbox>
							<xul:spacer flex="1" />
							<xul:label anonid="result-count" />
						</xul:hbox>					
						<xul:cfield name="pricelist" anonid="field_pricelist" fieldtype="namedgridlist" flex="1">
						</xul:cfield>
					</xul:vbox>
				</xul:scrollbox>
			</xul:vbox>
		</content>
		<implementation>	
			<field name="mFieldNames">['shop', 'date', 'targetType', 'targetId', 'pricelist']</field>
			
			<constructor><![CDATA[
				// Datepicker requires an id.
				var rand = Math.round(Math.random() * 100000); 
				this.getElementByAnonId('field_date').setAttribute('id', 'cPricesPanel_field_date_'+rand);

				// Check customer module existence.
				var controller = getController();
    			if (!controller.checkModuleVersion('customer', '3.0.0'))
				{
					this.getElementByAnonId('row_targetType').setAttribute('collapsed', 'true');
					this.getElementByAnonId('row_targetId').setAttribute('collapsed', 'true');
				}			
			]]></constructor>
			
			<property name="modified">
				<getter><![CDATA[return false;]]></getter>
				<setter><![CDATA[;]]></setter>
			</property>
						
			<method name="createNew">
				<body><![CDATA[
					wCore.debug('cPricesList.createNew');
					var productId = this.documentEditor.documentid;
					var shopId = this.fields.shop.value;
					var targetId = this.fields.targetId.value;
					var uri = ['catalog', 'createPriceFromProduct', 'modules_catalog_price', productId, shopId, targetId].join(',');
					wCore.debug('createNew: ' + uri);
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="refresh">
			<body><![CDATA[
				wCore.debug('refresh');
				this.mInitialized = false;
				this.documentEditor.executeServerAction('prices', 'Initialize');
				]]></body>
			</method>	
					
			<method name="getInitializeParameters">
				<body><![CDATA[
					var parameters = {
						action: 'InitializePricesPanel',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
					if (this.hasAttribute('shop'))
					{
						parameters.shop = this.getAttribute('shop');
					}
					if (this.hasAttribute('date'))
					{
						parameters.date = this.getAttribute('date');
					}
					
					var editor = this.documentEditor;
					if (editor.hasAttribute('targetType'))
					{
						parameters.targetType = editor.getAttribute('targetType');
						editor.removeAttribute('targetType');
					}
					else if (this.hasAttribute('targetType'))
					{
						parameters.targetType = this.getAttribute('targetType');
					}
					
					if (editor.hasAttribute('targetId'))
					{
						parameters.targetId = editor.getAttribute('targetId');
						editor.removeAttribute('targetId');
					}
					else if (this.hasAttribute('targetId'))
					{
						parameters.targetId = this.getAttribute('targetId');
					}
					return parameters;
				]]></body>
			</method>
												
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[
					if (result.status != 'OK')
					{
						this.showErrorMessage(result.contents.errorMessage);
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'true');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'true');
					}
					else if (!result.contents.enabled)
					{
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'true');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'true');
						this.showWarningMessage(result.contents.message);
					}
					else
					{
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'false');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'false');
															
						var shops = result.contents.shops;
						var shopNode = this.fields.shop;
						shopNode.removeItems();
						for (var i in shops)
						{
							var  shop = shops[i];
							shopNode.appendItem(shop.label, shop.id);
							shopNode.setAttribute('contains', shop.contains ? 'true' : 'false');
							shopNode.setAttribute('published', shop.published ? 'true' : 'false');
						}
						
						var targetTypes = result.contents.targetTypes;
						var targetType;
						var targetTypeNode = this.fields.targetType;
						targetTypeNode.removeItems();
						for (var i in targetTypes)
						{
							targetType = targetTypes[i];
							targetTypeNode.appendItem(targetType.label, targetType.value);
						}
					
						var targetIdNode = this.fields.targetId;
						targetIdNode.removeItems();
						if (result.contents.targetIds.length > 0)
						{
							var items = result.contents.targetIds;
							for (var i = 0; i < items.length; i++)
							{
								var item = items[i];
								targetIdNode.appendItem(item.label, item.value);
							}
							
							if (items.length > 1)
							{
								targetIdNode.removeAttribute('disabled');
							}
							else
							{
								targetIdNode.setAttribute('disabled', true);
							}
						}
						else
						{
							targetIdNode.setAttribute('disabled', true);
						}
							
						this.setInitialValues(this.fields, result.contents);					
					
						this.setAttribute('shop', result.contents.shop);
						this.setAttribute('date', result.contents.date);
						this.setAttribute('targetType', result.contents.targetType);
						this.setAttribute('targetId', result.contents.targetId);
							
					}			
					this.mInitialized = true;
					this.fireEvent("panelInitializeComplete");
					this.gotoTop();
				]]></body>
			</method>
			
			<method name="onCloseEditor">
				<body><![CDATA[	
					wCore.debug("onCloseEditor:" + this.localName);
					try
					{
						var fields = this.fields;
						for (var name in fields)
						{
							var field = fields[name];
							if ('setInitialValue' in field)
							{
								field.setInitialValue('');
							}
							else
							{
								field.setAttribute('initialvalue', '');
							}
						}
						this.removeAttribute('shop');
						this.removeAttribute('date');
						this.removeAttribute('targetType');
						this.removeAttribute('targetId');	
					} 
					catch (e)
					{
						wCore.error("onCloseEditor", [], e);
					}				
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized)
				{
					switch (event.originalTarget.name)
					{
						case 'shop':
							this.setAttribute('shop', event.originalTarget.value);
							this.refresh();
							break;
						case 'date':
							this.setAttribute('date', event.originalTarget.value);
							this.refresh();
							break;
						case 'targetType':
							this.setAttribute('targetType', event.originalTarget.value);
							this.removeAttribute('targetId');
							this.refresh();
							break;							
						case 'targetId':
							this.setAttribute('targetId', event.originalTarget.value);
							this.refresh();
							break;	
					}
				}
				event.stopPropagation();
			]]></handler>
			
			<handler event="gridUIUpdated"><![CDATA[
				var node = this.getElementByAnonId('result-count');
				var resultsCount = event.originalTarget.getRowCount();			
				if (resultsCount == 0)
				{
					node.setAttribute('value', "&amp;modules.uixul.bo.general.search.NoResults;");
				}
				else
				{
					node.setAttribute('value', "&amp;modules.uixul.bo.general.search.SearchResultCountLabel;" + " " + resultsCount);
				}
				//node.setAttribute('value', "&amp;modules.uixul.bo.general.search.FirstHundred;" + " (" +"&amp;modules.uixul.bo.general.search.TotalSearchResultCountLabel;" + totalResultsCount + " )");			
				event.stopPropagation();
			]]></handler>			
		</handlers>
	</binding>
	
	<binding id="cPricesList" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
						
			<method name="getPricePanel">
				<body><![CDATA[
					var pn = this.parentNode;
					while (pn && pn.localName != 'cpricespanel') {pn = pn.parentNode;}
					return pn;
				]]></body>
			</method>
										
			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />	
				<body><![CDATA[
					var uri = ['catalog', 'openDocument', 'modules_catalog_price', rowData.id, 'properties'].join(',');
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="execute_delete">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					wCore.debug('cPricesList.delete('+rowData.id+')');
					if (confirm("&modules.catalog.bo.doceditor.panel.prices.Confirm-delete-price;"))
					{
						var me = this;
						var callBack = function(result) {me.getPricePanel().refresh();};
						wCore.executeJSON('catalog', 'DeleteJSON', {cmpref: rowData.id, lang: Context.W_LANG}, callBack, true);
					}
				]]></body>
			</method>
			
			<method name="sortRowsBy">
				<parameter name="name" />
				<parameter name="dir" />
				<body><![CDATA[
					var dataset = this.buildDataset();
					if (name == 'valueWithTax') {name = 'value';}
					
					dataset.sort(function(r1, r2) {
						if (!(name in r1) || !(name in r2)) {return 0;}
						else if (r1[name] === r2[name]) {return 0;}
						else if (dir === 'asc') {return r1[name] > r2[name] ? 1 : -1;}
						else {return r1[name] < r2[name] ? 1 : -1;} 
					});
					this.updateDataset(dataset);
				]]></body>
			</method>	
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="3" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="actionrow"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-actions;" />
						<xul:label name="valueWithTax" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-value;" />
						<xul:label name="isDiscount" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-is-discount;" />
						<xul:label name="priority" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-priority;" />
						<xul:label name="targetLabel"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-target;" />
						<xul:label name="thresholdMin" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-threshold-min;" />
						<xul:label name="startpublicationdate"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-start-publication-date;" />
						<xul:label name="endpublicationdate"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-end-publication-date;" />
					</xul:row>
				</xul:rows>
			</xul:grid>		
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" />
					<xul:toolbarbutton action="delete" image="{IconsBase}/small/delete.png" tooltiptext="&amp;modules.uixul.bo.actions.Delete;" />
				</xul:toolbar>
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
			</xul:row>				
		</content>
	</binding>
</bindings>