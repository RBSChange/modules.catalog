<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="cPriceField" extends="form.cField#cDoubleField">
		<content>
			<children/>
			<xul:vbox>
				<xul:hbox xbl:inherits="context,spellcheck" flex="1" align="center">
					<xul:textbox size="5" anonid="internalcontrol" xbl:inherits="disabled,size,tabindex,accesskey" />
					<xul:spinbuttons anonid="buttons" xbl:inherits="disabled,hidden=hidespinbuttons" 
						style="margin-left:-5px;margin-top:3px;margin-bottom:3px;" />
					<xul:label xbl:inherits="value=currency" />
					<xul:label value="${transui:m.catalog.document.price.withtax}" xbl:inherits="hidden=editHT"/>
					<xul:label value="${transui:m.catalog.document.price.withouttax}" xbl:inherits="hidden=editTTC"/>
					<xul:label value="${transui:m.catalog.bo.doceditor.tax-category,ucf,lab,space}" xbl:inherits="hidden=hideCategory" />
					<xul:menulist anonid="categorySelector" xbl:inherits="disabled" xbl:inherits="hidden=hideCategory" >
						<xul:menupopup>
						</xul:menupopup>
					</xul:menulist>			
					<xul:label  />
					<xul:toolbar>
						<xul:toolbarbutton image="chrome://global/skin/icons/question-16.png" 
							xbl:inherits="hidden=hidehelp" 
							oncommand="dispatchFieldEvent('fieldHelp');"/>
					</xul:toolbar>
				</xul:hbox>
			</xul:vbox>
		</content>
		<implementation>
		
			<xbl:field name="inititializeValue">true</xbl:field>
			
			<xbl:property readonly="true" name="categorySelector">
				<xbl:getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, "anonid", "categorySelector");
				]]></xbl:getter>
			</xbl:property>
		
			<method name="setInitialValue">
				<parameter name="val" />
				<body><![CDATA[
					this.inititializeValue = true;	
					if (val.length > 1 && val.charAt(0) == '{')
					{	
						var jsonVal = wCore.parseJSON(val);
						this.setAttribute('currency', jsonVal.currency);
						this.setAttribute('taxCategory', this.fixString(jsonVal.taxCategory));
						this.setAttribute('hideCategory', ('hideCategory' in jsonVal) ? 'true' : false);
						if (jsonVal.editTTC)
						{
							this.setAttribute('editTTC', 'true');
							this.setAttribute('editHT', 'false');
						}
						else
						{
							this.setAttribute('editTTC', 'false');
							this.setAttribute('editHT', 'true');
						}
						var fval = this.fixString(jsonVal.value);
						this.internalControl.value = fval;
						this.setAttribute("initialvalue", fval + ',' + this.getAttribute('taxCategory'));					
						var catSelector = this.categorySelector;
						catSelector.removeAllItems();
						
						for (var tcat in jsonVal.taxCategories)
						{
							var catInfo = jsonVal.taxCategories[tcat];
							catSelector.appendItem(catInfo.label, tcat);
						}
						catSelector.value = this.getAttribute('taxCategory');
					}
					else
					{
						var parts = val.split(',');
						var fval = this.fixString(parts[0]);
						this.internalControl.value = parts[0];
						if (parts.length == 2) 
						{
							this.setAttribute('taxCategory', parts[1]);
							this.categorySelector.value = parts[1];
						}
					}
					
					if (this.modified)
					{
						this.removeAttribute("modified");
						this.dispatchFieldEvent('fieldRestored');						
					}					
					var errorMessage = this.checkRequired(fval);
					this.setValidity(errorMessage);										
					this.inititializeValue = false;
				]]></body>
			</method>

			<method name="onCategoryChange">
				<parameter name="event" />
				<body><![CDATA[
					if (!this.inititializeValue)
					{
						this.setAttribute('taxCategory', this.categorySelector.value);
						this.dispatchValueChanged(this.value);
					}
				]]></body>
			</method>
			
			<property name="value" >
				<getter><![CDATA[
					var val = this.internalControl.value;
					return ((val.length > 0) ? val.replace(',', '.') : val) + ',' + this.getAttribute('taxCategory');
				]]></getter>
				<setter><![CDATA[
					var fval = this.fixString(val);
					var parts = fval.split(',');
					this.internalControl.value = parts[0];
					if (parts.length == 2) 
					{
						this.inititializeValue = true;
						this.setAttribute('taxCategory', parts[1]);
						this.categorySelector.value = parts[1];
						this.inititializeValue = false;
					}
					this.valueChanged();
				]]></setter>
			</property>
			
			<method name="checkFormat">
				<parameter name="val" />
				<body><![CDATA[						
					var str = this.getValueForConstraintChecking(val);
					if (str.length > 0 && !str.match(/^[\-+]?\d{0,8}([\.,]\d*)?$/))
					{
						return "${transui:f.validation.validator.float.message,ucf,js}".replace('{field}', this.label);
					}
					return null;
				]]></body>
			</method>
			
			<method name="getValueForConstraintChecking">
				<parameter name="val" />
				<body><![CDATA[
					return this.fixString(val).split(',')[0];
				]]></body>
			</method>								
		</implementation>
		
		<handlers>
			<handler event="select"><![CDATA[
				this.onCategoryChange(event);
			]]></handler>
		</handlers>
		
	</binding>
	
	<binding id="cDiscountHelper">
		<content>
			<xul:spacer />
			<xul:hbox align="center">
				<xul:box><xul:cfield anonid="mType" name="mType" fieldtype="dropdownlist" hidehelp="true" listid="modules_catalog/discounttypes" initialvalue="price" /></xul:box>
				<xul:box><xul:cfield anonid="mValue" name="mValue" fieldtype="double" disabled="true" hidehelp="true" /></xul:box>
				<xul:button anonid="mUpdate" disabled="true" label="Mettre Ã  jour le prix" oncommand="update();" image="{IconsBase}/small/check.png" />
				<xul:button anonid="mCancel" disabled="true" label="Annuler" oncommand="cancel();" image="{IconsBase}/small/undo.png" />
			</xul:hbox>
		</content>
		<implementation>
			<method name="update">
				<body><![CDATA[
					var discountType = document.getAnonymousElementByAttribute(this, 'anonid', 'mType').value;
					var discountValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue').value;
					var valueField = document.getElementById(this.getAttribute('reference'));
					
					var valueParts = valueField.value.split(',');
					var value = valueParts[0];
					var description = '';
					switch (discountType)
					{
						case 'percentage' :
							value -= (value * discountValue) / 100;
							description = '-' + discountValue + '%';
							break;
							
						case 'value' :
							value -= discountValue;
							description = '-' + discountValue + valueField.getAttribute('currency');
							break;
					}
					value = Math.round(100 * value)/100;
					document.getElementById(this.getAttribute('pricefield')).value = value + ',' + valueParts[1];
					document.getElementById(this.getAttribute('detailfield')).value = description;
					this.cancel();
				]]></body>
			</method>
			
			<method name="cancel">
				<body><![CDATA[
					document.getAnonymousElementByAttribute(this, 'anonid', 'mType').value = 'price';
				]]></body>
			</method>
		
			<method name="onTypeChanged">
				<body><![CDATA[
					try
					{
						var mType = document.getAnonymousElementByAttribute(this, 'anonid', 'mType');
						var mValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue');
						var mCancel = document.getAnonymousElementByAttribute(this, 'anonid', 'mCancel');
						
						if (mType.value != 'price')
						{
							mCancel.removeAttribute('disabled');
							mValue.removeAttribute('disabled');
							
						}
						else
						{
							mCancel.setAttribute('disabled', 'true');
							mValue.value = '';
							mValue.setAttribute('disabled', 'true');
						}
					}
					catch (e)
					{
						wCore.error('cDiscountHelper.onTypeChanged', [], e);
					}
				]]></body>
			</method>
			
			<method name="onValueChanged">
				<body><![CDATA[
					try
					{
						var mValue = document.getAnonymousElementByAttribute(this, 'anonid', 'mValue');
						var mUpdate = document.getAnonymousElementByAttribute(this, 'anonid', 'mUpdate');
						
						if (mValue.value)
						{
							mUpdate.removeAttribute('disabled');
						}
						else
						{
							mUpdate.setAttribute('disabled', 'true');
						}
					}
					catch (e)
					{
						wCore.error('onValueChanged.onValueChanged', [], e);
					}
				]]></body>
			</method>
		</implementation>
		
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (event.originalTarget.name == 'mType')
				{
					this.onTypeChanged();
				}
				else if (event.originalTarget.name == 'mValue')
				{
					this.onValueChanged();
				}
				event.stopPropagation();
			]]></handler>
			<handler event="fieldModified"><![CDATA[
				event.stopPropagation();
			]]></handler>
			<handler event="fieldRestored"><![CDATA[
				event.stopPropagation();
			]]></handler>
		</handlers>
	</binding>
	
	<binding id="cPricesPanel" extends="layout.cDocumentEditor#cDocumentEditorPanelFields">
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:hbox anonid="action-bar">
					<xul:button anonid="button-new" oncommand="createNew()" label="&amp;modules.catalog.bo.doceditor.panel.prices.New;" image="{IconsBase}/small/add.png"/>
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:box anonid="price-filters-box">
						<xul:grid flex="1">
							<xul:columns>
								<xul:column />
								<xul:column flex="1" />
							</xul:columns>
							<xul:rows>
								<xul:row>
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Shop;" />
									<xul:cfield anonid="field_shop" name="shop" fieldtype="dropdownlist" hidehelp="true" />
								</xul:row>
								<xul:row>
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Date;" />
									<xul:cfield anonid="field_date" name="date" fieldtype="datetime" hidehelp="true" hidetime="true" />
								</xul:row>
								<xul:row anonid="row_targetType">
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Target-type;" />
									<xul:cfield anonid="field_targetType" name="targetType" fieldtype="dropdownlist" hidehelp="true" />
								</xul:row>
								<xul:row anonid="row_targetId">
									<xul:label value="&amp;modules.catalog.bo.doceditor.panel.prices.Target-id;" />
									<xul:deck anonid="field_targetIdDeck">
										<xul:cfield anonid="field_targetIdPicker" name="targetIdPicker" fieldtype="document" hidehelp="true" disabled="true" allow="modules_customer_customer" moduleselector="customer" />
										<xul:cfield anonid="field_targetIdSelect" name="targetIdSelect" fieldtype="dropdownlist" hidehelp="true" disabled="true" />
									</xul:deck>
								</xul:row>
							</xul:rows>
						</xul:grid>
					</xul:box>
					<xul:vbox flex="1" anonid="price-list-box">	
						<xul:hbox>
							<xul:spacer flex="1" />
							<xul:label anonid="result-count" />
						</xul:hbox>					
						<xul:cfield name="pricelist" anonid="field_pricelist" fieldtype="namedgridlist" flex="1" />
					</xul:vbox>
				</xul:scrollbox>
			</xul:vbox>
		</content>
		<implementation>	
			<field name="mFieldNames">['shop', 'date', 'targetType', 'pricelist']</field>
			
			<constructor><![CDATA[
				// Datepicker requires an id.
				var rand = Math.round(Math.random() * 100000); 
				this.getElementByAnonId('field_date').setAttribute('id', 'cPricesPanel_field_date_'+rand);

				// Check customer module existence.
				var controller = getController();
    			if (!controller.checkModuleVersion('customer', '3.0.0'))
				{
					this.getElementByAnonId('row_targetType').setAttribute('collapsed', 'true');
					this.getElementByAnonId('row_targetId').setAttribute('collapsed', 'true');
				}			
			]]></constructor>
			
			<property name="modified">
				<getter><![CDATA[return false;]]></getter>
				<setter><![CDATA[;]]></setter>
			</property>
						
			<method name="createNew">
				<body><![CDATA[
					//wCore.debug('cPricesList.createNew');
					var productId = this.documentEditor.documentid;
					var shopId = this.fields.shop.value;
					var targetIdNode = this.getElementByAnonId('field_targetIdDeck').selectedPanel;
					var targetId = (!targetIdNode.hasAttribute("disabled")) ? targetIdNode.value : null;
					var uri = ['catalog', 'createPriceFromProduct', 'modules_catalog_price', productId, shopId, targetId].join(',');
					wCore.debug('createNew: ' + uri);
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="refresh">
			<body><![CDATA[
				//wCore.debug('refresh');
				this.mInitialized = false;
				this.documentEditor.executeServerAction('prices', 'Initialize');
				]]></body>
			</method>	
					
			<method name="getInitializeParameters">
				<body><![CDATA[
					var parameters = {
						action: 'InitializePricesPanel',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
					if (this.hasAttribute('shop'))
					{
						parameters.shop = this.getAttribute('shop');
					}
					if (this.hasAttribute('date'))
					{
						parameters.date = this.getAttribute('date');
					}
					
					var editor = this.documentEditor;
					if (editor.hasAttribute('targetType'))
					{
						parameters.targetType = editor.getAttribute('targetType');
						editor.removeAttribute('targetType');
					}
					else if (this.hasAttribute('targetType'))
					{
						parameters.targetType = this.getAttribute('targetType');
					}
					
					if (editor.hasAttribute('targetId'))
					{
						parameters.targetId = editor.getAttribute('targetId');
						editor.removeAttribute('targetId');
					}
					else if (this.hasAttribute('targetId'))
					{
						parameters.targetId = this.getAttribute('targetId');
					}
					return parameters;
				]]></body>
			</method>
												
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[
					if (result.status != 'OK')
					{
						this.showErrorMessage(result.contents.errorMessage);
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'true');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'true');
					}
					else if (!result.contents.enabled)
					{
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'true');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'true');
						this.showWarningMessage(result.contents.message);
						this.getElementByAnonId('button-new').setAttribute('hidden', 'true');
					}
					else
					{
						this.getElementByAnonId('price-filters-box').setAttribute('hidden', 'false');
						this.getElementByAnonId('price-list-box').setAttribute('hidden', 'false');
						this.getElementByAnonId('button-new').setAttribute('hidden', 'false');
															
						var shops = result.contents.shops;
						var shopNode = this.fields.shop;
						shopNode.removeItems();
						for (var i in shops)
						{
							var  shop = shops[i];
							shopNode.appendItem(shop.label, shop.id);
							shopNode.setAttribute('contains', shop.contains ? 'true' : 'false');
							shopNode.setAttribute('published', shop.published ? 'true' : 'false');
						}
						
						var targetTypes = result.contents.targetTypes;
						var targetType;
						var targetTypeNode = this.fields.targetType;
						targetTypeNode.removeItems();
						for (var i in targetTypes)
						{
							targetType = targetTypes[i];
							targetTypeNode.appendItem(targetType.label, targetType.value);
						}
						
						var targetId = (typeof(result.contents.targetId) != 'undefined') ? result.contents.targetId : null;
						var targetDeck = this.getElementByAnonId("field_targetIdDeck");
						if (result.contents.targetInfo)
						{
							var targetInfo = result.contents.targetInfo;
							if (targetInfo.type == "document")
							{
								targetDeck.selectedIndex = 0;
								var picker = targetDeck.selectedPanel;
								if (targetInfo.allow)
								{
									picker.setAttribute("allow", targetInfo.allow);
								}
								else
								{
									picker.removeAttribute("allow");
								}
								if (targetInfo.moduleselector)
								{
									picker.setAttribute("moduleselector", targetInfo.moduleselector);
								}
								else
								{
									picker.removeAttribute("moduleselector");
								}
							}
							else if (targetInfo.type == "dropdown")
							{
								targetDeck.selectedIndex = 1;
								var dropdown = targetDeck.selectedPanel;
								dropdown.removeItems();
								if (targetInfo.options)
								{
									var items = targetInfo.options;
									for (var i = 0; i < items.length; i++)
									{
										var item = items[i];
										dropdown.appendItem(item.label, item.id);
									}
								}
							}
							
							targetDeck.selectedPanel.removeAttribute('disabled');
						}
						else
						{
							targetDeck.selectedPanel.setAttribute('disabled', 'true');
						}
						
						targetDeck.selectedPanel.setAttribute("value", targetId);
						targetDeck.selectedPanel.value = targetId;
						
						this.setInitialValues(this.fields, result.contents);
					
						this.setAttribute('shop', result.contents.shop);
						this.setAttribute('date', result.contents.date);
						this.setAttribute('targetType', result.contents.targetType);
						this.setAttribute('targetId', targetId);
					}
					this.mInitialized = true;
					this.fireEvent("panelInitializeComplete");
					this.gotoTop();
				]]></body>
			</method>
			
			<method name="onCloseEditor">
				<body><![CDATA[	
					//wCore.debug("onCloseEditor:" + this.localName);
					try
					{
						var fields = this.fields;
						for (var name in fields)
						{
							var field = fields[name];
							if ('setInitialValue' in field)
							{
								field.setInitialValue('');
							}
							else
							{
								field.setAttribute('initialvalue', '');
							}
						}
						this.removeAttribute('shop');
						this.removeAttribute('date');
						this.removeAttribute('targetType');
						this.removeAttribute('targetId');	
					} 
					catch (e)
					{
						wCore.error("onCloseEditor", [], e);
					}				
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized)
				{
					switch (event.originalTarget.name)
					{
						case 'shop':
							this.setAttribute('shop', event.originalTarget.value);
							this.refresh();
							break;
						case 'date':
							this.setAttribute('date', event.originalTarget.value);
							this.refresh();
							break;
						case 'targetType':
							this.setAttribute('targetType', event.originalTarget.value);
							this.removeAttribute('targetId');
							this.refresh();
							break;
						case 'targetIdPicker':
						case 'targetIdSelect':
							if (event.originalTarget.value == "")
							{
								this.removeAttribute('targetId');
							}
							else
							{
								this.setAttribute('targetId', event.originalTarget.value);
							}
							this.refresh();
							break;
					}
				}
				event.stopPropagation();
			]]></handler>
			
			<handler event="gridUIUpdated"><![CDATA[
				var node = this.getElementByAnonId('result-count');
				var resultsCount = event.originalTarget.getRowCount();			
				if (resultsCount == 0)
				{
					node.setAttribute('value', "&amp;modules.uixul.bo.general.search.NoResults;");
				}
				else
				{
					node.setAttribute('value', "&amp;modules.uixul.bo.general.search.SearchResultCountLabel;" + " " + resultsCount);
				}
				//node.setAttribute('value', "&amp;modules.uixul.bo.general.search.FirstHundred;" + " (" +"&amp;modules.uixul.bo.general.search.TotalSearchResultCountLabel;" + totalResultsCount + " )");			
				event.stopPropagation();
			]]></handler>			
		</handlers>
	</binding>
	
	<binding id="cPricesList" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
						
			<method name="getPricePanel">
				<body><![CDATA[
					var pn = this.parentNode;
					while (pn && pn.localName != 'cpricespanel') {pn = pn.parentNode;}
					return pn;
				]]></body>
			</method>
										
			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />	
				<body><![CDATA[
					var uri = ['catalog', 'openDocument', rowData.boModel, rowData.id, 'properties'].join(',');
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="execute_delete">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (confirm("&modules.catalog.bo.doceditor.panel.prices.Confirm-delete-price;"))
					{
						var me = this;
						var callBack = function(result) { me.getPricePanel().refresh(); };
						wCore.executeJSON('catalog', 'DeleteJSON', {cmpref: rowData.id, lang: Context.W_LANG}, callBack, true);
					}
				]]></body>
			</method>
			
			<method name="execute_addDiscount">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					getController().openModalDialog(this.getPricePanel(), 'addDiscountOnPrice', { priceId: rowData.id });
				]]></body>
			</method>
			
			<method name="execute_removeDiscount">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (confirm("&modules.catalog.bo.doceditor.panel.prices.Confirm-remove-discount;"))
					{
						var me = this;
						var callBack = function(result) {me.getPricePanel().refresh();};
						wCore.executeJSON('catalog', 'RemoveDiscount', {cmpref: rowData.id, lang: Context.W_LANG}, callBack, true);
					}
				]]></body>
			</method>
			
			<method name="sortRowsBy">
				<parameter name="name" />
				<parameter name="dir" />
				<body><![CDATA[
					var dataset = this.buildDataset();
					if (name == 'valueWithTax') {name = 'value';}
					
					dataset.sort(function(r1, r2) {
						if (!(name in r1) || !(name in r2)) {return 0;}
						else if (r1[name] === r2[name]) {return 0;}
						else if (dir === 'asc') {return r1[name] > r2[name] ? 1 : -1;}
						else {return r1[name] < r2[name] ? 1 : -1;} 
					});
					this.updateDataset(dataset);
				]]></body>
			</method>
			
			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[					
					if (name == 'actionrow')
					{
						if (dataRow.allowDiscountCreation)
						{
							cell.removeAttribute('hideAddDiscount');
						}
						else
						{
							cell.setAttribute('hideAddDiscount', 'true');
						}
						if (dataRow.allowDiscountRemoval)
						{
							cell.removeAttribute('hideRemoveDiscount');
						}
						else
						{
							cell.setAttribute('hideRemoveDiscount', 'true');
						}
					}
					
					if ('value' in cell)
					{
						cell.value = dataRow[name];
					}
					else
					{
						cell.setAttribute('value', dataRow[name]);
					}
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="3" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="status" value="" />
						<xul:label name="valueWithTax" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-value;" />
						<xul:label name="isDiscountLabel" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-is-discount;" />
						<xul:label name="priority" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-priority;" />
						<xul:label name="targetLabel"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-target;" />
						<xul:label name="thresholdMin" sortonfield="true"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-threshold-min;" />
						<xul:label name="startpublicationdate"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-start-publication-date;" />
						<xul:label name="endpublicationdate"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-end-publication-date;" />
						<xul:label name="actionrow"
							value="&amp;modules.catalog.bo.doceditor.panel.prices.Column-actions;" />						
					</xul:row>
				</xul:rows>
			</xul:grid>		
			<xul:row anonid="template-row" class="document" hidden="true" align="center">
				<xul:cpublicationcell />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:cactioncell />
			</xul:row>				
		</content>
	</binding>
	
	<binding id="cPricesListActionCell">
		<content>
			<xul:toolbar class="actions">
				<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" />
				<xul:toolbarbutton action="delete" image="{IconsBase}/small/delete.png" tooltiptext="&amp;modules.uixul.bo.actions.Delete;" />
				<xul:toolbarbutton action="addDiscount" xbl:inherits="hidden=hideAddDiscount" image="{IconsBase}/small/discount-add.png" tooltiptext="&amp;modules.catalog.bo.actions.Add-discount;" />
				<xul:toolbarbutton action="removeDiscount" xbl:inherits="hidden=hideRemoveDiscount" image="{IconsBase}/small/discount-remove.png" tooltiptext="&amp;modules.catalog.bo.actions.Remove-discount;" />
			</xul:toolbar>
		</content>
	</binding>
	
	<binding id="cAddDiscountOnPriceDialog" extends="core.wDialog#wDialog">
		<resources>
			<stylesheet src="modules.uixul.cDocumentEditor" />
		</resources>
		<implementation>
			<field name="mInitialized">false</field>
			<field name="mPriceId">null</field>
			<field name="mFields">null</field>
			<field name="mFieldNames">['discountValue', 'discountDetail', 'discountStartDate', 'discountEndDate']</field>

			<constructor><![CDATA[
				//wCore.debug('cAddDiscountOnPriceDialog.constructor');
			]]></constructor>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(750, 325);
					this.mPriceId = this.parameters.priceId;
					this.mMessageBox = this.getElementById('message');
					
					var result = wCore.executeJSON('catalog', 'LoadPriceInfoToAddDiscount', { cmpref: this.mPriceId }, null, true);
					if (result.status === 'OK')
					{
						var contents = result.contents;
						this.setAttribute('currentStartDate', contents.currentStartDateFormatted);
						this.setAttribute('currentEndDate', contents.currentEndDateFormatted);
						if (contents.currentStartDate)
						{
							this.setConstraint('discountStartDate', 'min', contents.currentStartDate);
							this.setConstraint('discountEndDate', 'min', contents.currentStartDate);
						}
						if (contents.currentEndDate)
						{
							this.setConstraint('discountStartDate', 'max', contents.currentEndDate);
							this.setConstraint('discountEndDate', 'max', contents.currentEndDate);
						}
						
						var jsonVal = wCore.parseJSON(contents.currentPriceValue);
						this.setAttribute('currentValue', jsonVal.value);
						this.setAttribute('referenceValue', jsonVal.value + ',' + jsonVal.taxCategory);
						this.setAttribute('currentCurrency', jsonVal.currency);
						if (jsonVal.editTTC)
						{
							this.setAttribute('editTTC', 'true');
							this.setAttribute('editHT', 'false');
						}
						else
						{
							this.setAttribute('editTTC', 'false');
							this.setAttribute('editHT', 'true');
						}						
						this.setFieldInitialValueByAnonId('discountValue', contents.discountPriceValue);
						this.mInitialized = true;
						this.refreshErrorState();
					}
					else
					{
						wToolkit.setNotificationMessage(result.contents.errorMessage, wToolkit.ERROR);
					}
				]]></body>
			</method>
			
			<method name="setFieldInitialValueByAnonId">
				<parameter name="anonId" />
				<parameter name="value" />
				<body><![CDATA[
					var field = this.getElementByAnonId(anonId);
					if ('setInitialValue' in field)
					{
						field.setInitialValue(value);
					}
					else
					{
						field.setAttribute('initalvalue', value);
					}
				]]></body>
			</method>
			
			<method name="setConstraint">
				<parameter name="fieldName" />
				<parameter name="name" />
				<parameter name="value" />
				<body><![CDATA[
					var constraint = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'cconstraint');
					constraint.setAttribute('name', name);
					constraint.setAttribute('parameter', value);
					if ('addParameter' in constraint)
					{
						constraint.addParameter('param', value);
					}
					this.fields[fieldName].appendChild(constraint);
				]]></body>
			</method>
			
			<property name="fields" readonly="true">
				<getter><![CDATA[
					if (this.mFields == null)
					{
						this.mFields = {
							discountValue: this.getElementByAnonId('discountValue'),
							discountDetail: this.getElementByAnonId('discountDetail'),
							discountStartDate: this.getElementByAnonId('discountStartDate'),
							discountEndDate: this.getElementByAnonId('discountEndDate'),
						};
					}
					return this.mFields;
				]]></getter>
			</property>
			
			<property name="error">
				<getter><![CDATA[
					return this.getAttribute("error") === "true";
				]]></getter>
				<setter><![CDATA[
					var oldval = this.error;
					if (val != oldval)
					{
						if (val)
						{
							this.setAttribute("error", "true");
						}
						else
						{
							this.removeAttribute("error");
						}
						this.updateCommandsUI();
					}
				]]></setter>
			</property>
					
			<method name="refreshErrorState">
				<body><![CDATA[
					var fields = this.fields;
					for (var name in fields)
					{
						var field = fields[name];
						if (field.hasAttribute('error') && field.getAttribute('error') === 'true')
						{
							this.error = true; 
							return;
						}
					}
					this.error = false;
				]]></body>
			</method>
			
			<method name="updateCommandsUI">
				<body><![CDATA[
					this.getElementByAnonId('submit').disabled = this.error;
				]]></body>
			</method>
			
			<method name="onFieldError">
				<parameter name="field" />
				<body><![CDATA[	
					this.showErrorMessage(field.errormessage);
				]]></body>
			</method>

			<method name="onFieldValidated">
				<parameter name="field" />
				<body><![CDATA[
					if (this.messageBox)
					{
						this.messageBox.clear();
					}
				]]></body>
			</method>
			
			<method name="onFieldFocus">
				<parameter name="field" />
				<body><![CDATA[
					if (this.messageBox)
					{
						if (!field.valid)
						{
							this.showErrorMessage(field.errormessage);
						}
					}
				]]></body>
			</method>
			
			<method name="addDiscount">
				<body><![CDATA[
					var params = {
						cmpref: this.mPriceId,
						value: this.getElementByAnonId('discountValue').value,
						detail: this.getElementByAnonId('discountDetail').value,
						start: this.getElementByAnonId('discountStartDate').value,
						end: this.getElementByAnonId('discountEndDate').value
					}
					var result = wCore.executeJSON('catalog', 'AddDiscountOnPrice', params, null, true);
					this.closeDialog(true);
				]]></body>
			</method>

			<method name="closeDialog">
				<parameter name="refesh" />
				<body><![CDATA[
					if (refesh && this.sender && 'refresh' in this.sender)
					{
						this.sender.refresh();	
					}
					this.controller.closeModalDialog(true);
				]]></body>
			</method>
			
			<property name="messageBox" readonly="true">
				<getter><![CDATA[
					return this.mMessageBox;
				]]></getter>
			</property>
			
			<method name="showErrorMessage">
				<parameter name="text"/>
				<body><![CDATA[
					if (this.messageBox) {this.messageBox.showMessage("error", text);}
				]]></body>
			</method>
			
			<method name="showWarningMessage">
				<parameter name="text"/>
				<body><![CDATA[					
					if (this.messageBox) {this.messageBox.showMessage("warning", text);}
				]]></body>
			</method>
									
			<method name="showTextMessage">
				<parameter name="text"/>
				<body><![CDATA[	
					if (this.messageBox) {this.messageBox.showMessage("information", text);}				
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="fieldFocus"><![CDATA[
				if (!this.mInitialized) {return;}
				this.onFieldFocus(event.originalTarget);
			]]></handler>
			
			<handler event="fieldError"><![CDATA[
				if (!this.mInitialized) {return;}
				this.error = true;
				this.onFieldError(event.originalTarget);
			]]></handler>

			<handler event="fieldValidated"><![CDATA[
				if (!this.mInitialized) {return;}
				if (this.error) {this.refreshErrorState();}
				this.onFieldValidated(event.originalTarget);
			]]></handler>
		</handlers>	
		<content>
			<xul:vbox flex="1">
				<xul:hbox class="wizardTitle">
					<xul:label value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Title;" />
					<xul:spacer flex="1" />
					<xul:toolbarbutton image="{IconsBase}/small/delete.png" oncommand="closeDialog(false);" />
				</xul:hbox>
				<xul:spacer height="5px" />
				<xul:cmessageinfo anonid="message" />
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:spacer height="5px" />
					<xul:vbox>
						<xul:row align="right" class="discountHelper" 
							reference="cAddDiscountOnPriceDialog_currentValue" 
							pricefield="cAddDiscountOnPriceDialog_discountValue" 
							detailfield="cAddDiscountOnPriceDialog_discountDetail" />
						<xul:grid flex="1">
							<xul:columns>
								<xul:column flex="1" />
								<xul:column flex="1" />
								<xul:column />
								<xul:column />
							</xul:columns>
							<xul:rows anonid="document-rows">
								<xul:row align="center">
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Discount-value;" control="cAddDiscountOnPriceDialog_discountValue" />
									<xul:cfield id="cAddDiscountOnPriceDialog_discountValue" anonid="discountValue" name="discountValue" required="true" fieldtype="price" hidehelp="true">
										<xul:cconstraint name="min" parameter="0" />
									</xul:cfield>
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Current-value;" />
									<xul:hbox>
										<xul:label id="cAddDiscountOnPriceDialog_currentValue" xbl:inherits="value=referenceValue" hidden="true" />
										<xul:label xbl:inherits="xbl:text=currentValue" class="allow-text-selection" />
										<xul:label xbl:inherits="xbl:text=currentCurrency" class="allow-text-selection" />
										<xul:label value="${transui:m.catalog.document.price.withtax}" xbl:inherits="hidden=editHT"/>
										<xul:label value="${transui:m.catalog.document.price.withouttax}" xbl:inherits="hidden=editTTC"/>
									</xul:hbox>
								</xul:row>
								<xul:row align="center">
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Discount-detail;" control="cAddDiscountOnPriceDialog_discountDetail" />
									<xul:cfield id="cAddDiscountOnPriceDialog_discountDetail" anonid="discountDetail" name="discountDetail" fieldtype="text" hidehelp="true" />
									<xul:spacer />
									<xul:spacer />
								</xul:row>
								<xul:row align="center">
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Discount-start-date;" control="cAddDiscountOnPriceDialog_discountStartDate" />
									<xul:cfield id="cAddDiscountOnPriceDialog_discountStartDate" anonid="discountStartDate" name="discountStartDate" fieldtype="datetime" required="true" hidehelp="true" timeoffset="30" initialvalue="" />
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Current-start-date;" />
									<xul:label xbl:inherits="xbl:text=currentStartDate" class="allow-text-selection" />
								</xul:row>
								<xul:row align="center">
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Discount-end-date;" control="cAddDiscountOnPriceDialog_discountEndDate" />
									<xul:cfield id="cAddDiscountOnPriceDialog_discountEndDate" anonid="discountEndDate" name="discountEndDate" fieldtype="datetime" required="true" hidehelp="true" timeoffset="30" initialvalue="" />
									<xul:clabel value="&amp;modules.catalog.bo.doceditor.dialog.add-discount-on-price.Current-end-date;" />
									<xul:label xbl:inherits="xbl:text=currentEndDate" class="allow-text-selection" />
								</xul:row>
							</xul:rows>
						</xul:grid>
					</xul:vbox>
					<xul:spacer flex="1" />
				</xul:scrollbox>
				<xul:hbox pack="center">
					<xul:button anonid="submit" image="{IconsBase}/small/check.png" oncommand="addDiscount();" label="&amp;modules.uixul.bo.dialog.Apply;" />
				</xul:hbox>
			</xul:vbox>
		</content>
	</binding>
</bindings>